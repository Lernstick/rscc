package ch.imedias.rscc;

import ch.imedias.rscc.model.SupportAddress;
import java.awt.Component;
import java.awt.Window;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 * a dialog for editing the support addresses
 *
 * @author Ronny Standtke <ronny.standtke@fhnw.ch>
 */
public class EditDialog extends JDialog implements ListSelectionListener {

    private final static ResourceBundle BUNDLE = ResourceBundle.getBundle(
            "ch/imedias/rscc/Bundle");
    private final static Logger LOGGER
            = Logger.getLogger(EditDialog.class.getName());
    private final SupportAddressesTableModel tableModel;
    private List<SupportAddress> supportAddresses;
    private boolean okPressed;

    /**
     * Creates new form EditDialog
     *
     * @param parent the parent frame
     * @param supportAddresses the list of support addresses to edit
     */
    public EditDialog(Window parent, List<SupportAddress> supportAddresses) {
        super(parent, ModalityType.APPLICATION_MODAL);
        // make a deep copy of the list
        this.supportAddresses = new ArrayList<SupportAddress>();
        for (SupportAddress supportAddress : supportAddresses) {
            if (supportAddress == null) {
                continue;
            }
            SupportAddress addressCopy = new SupportAddress(
                    supportAddress.getDescription(),
                    supportAddress.getAddress(),
                    supportAddress.isEncrypted());
            this.supportAddresses.add(addressCopy);
        }
        tableModel = new SupportAddressesTableModel();
        initComponents();
        table.setModel(tableModel);

        // determine size and location
        adjustColumnPreferredWidths(table);
        pack();
        setLocationRelativeTo(parent);
    }

    /**
     * handles table selection events
     *
     * @param e the selection event
     */
    @Override
    public void valueChanged(ListSelectionEvent e) {
        int[] selectedRows = table.getSelectedRows();
        boolean selected = selectedRows.length > 0;
        deleteButton.setEnabled(selected);
        upButton.setEnabled(selected && (selectedRows[0] != 0));
        if (selected) {
            int lastSelectedIndex = selectedRows[selectedRows.length - 1];
            int lastRowIndex = supportAddresses.size() - 1;
            downButton.setEnabled(lastSelectedIndex != lastRowIndex);
        } else {
            downButton.setEnabled(false);
        }
    }

    /**
     * returns the support addresses
     *
     * @return the supportAddresses
     */
    public List<SupportAddress> getSupportAddresses() {
        return supportAddresses;
    }

    /**
     * returns <code>true</code>, if the OK button was pressed,
     * <code>false</code> otherwise
     *
     * @return <code>true</code>, if the OK button was pressed,
     * <code>false</code> otherwise
     */
    public boolean okPressed() {
        return okPressed;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        insertButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        defaultButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ch/imedias/rscc/Bundle"); // NOI18N
        setTitle(bundle.getString("EditDialog.title")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        scrollPane.setViewportView(table);

        insertButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/imedias/rscc/icons/16x16/edit-table-insert-row-under.png"))); // NOI18N
        insertButton.setToolTipText(bundle.getString("EditDialog.insertButton.toolTipText")); // NOI18N
        insertButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/imedias/rscc/icons/16x16/edit-table-delete-row.png"))); // NOI18N
        deleteButton.setToolTipText(bundle.getString("EditDialog.deleteButton.toolTipText")); // NOI18N
        deleteButton.setEnabled(false);
        deleteButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/imedias/rscc/icons/16x16/arrow-up.png"))); // NOI18N
        upButton.setToolTipText(bundle.getString("EditDialog.upButton.toolTipText")); // NOI18N
        upButton.setEnabled(false);
        upButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/imedias/rscc/icons/16x16/arrow-down.png"))); // NOI18N
        downButton.setToolTipText(bundle.getString("EditDialog.downButton.toolTipText")); // NOI18N
        downButton.setEnabled(false);
        downButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        defaultButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/imedias/rscc/icons/16x16/document-revert.png"))); // NOI18N
        defaultButton.setToolTipText(bundle.getString("EditDialog.defaultButton.toolTipText")); // NOI18N
        defaultButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/imedias/rscc/icons/16x16/dialog-ok-apply.png"))); // NOI18N
        okButton.setText(bundle.getString("EditDialog.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/imedias/rscc/icons/16x16/dialog-cancel.png"))); // NOI18N
        cancelButton.setText(bundle.getString("EditDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(insertButton)
                                        .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(upButton, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addComponent(downButton, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(defaultButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(insertButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(upButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(defaultButton)
                        .addGap(0, 29, Short.MAX_VALUE))
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        tableModel.addSupportAddress();
    }//GEN-LAST:event_insertButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        tableModel.removeSupportAddresses(table.getSelectedRows());
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        TableCellEditor tableCellEditor = table.getCellEditor();
        if (tableCellEditor != null) {
            tableCellEditor.stopCellEditing();
        }
        okPressed = true;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        int[] selectedRows = table.getSelectedRows();
        table.clearSelection();
        for (int selectedRow : selectedRows) {
            // swap with previous address
            SupportAddress address = supportAddresses.get(selectedRow);
            int previousRow = selectedRow - 1;
            SupportAddress previousAddress = supportAddresses.get(previousRow);
            supportAddresses.set(previousRow, address);
            supportAddresses.set(selectedRow, previousAddress);
            table.getSelectionModel().addSelectionInterval(
                    previousRow, previousRow);
        }
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        int[] selectedRows = table.getSelectedRows();
        table.clearSelection();
        for (int i = selectedRows.length - 1; i >= 0; i--) {
            // swap with next address
            int selectedRow = selectedRows[i];
            SupportAddress address = supportAddresses.get(selectedRow);
            int nextRow = selectedRow + 1;
            SupportAddress nextAddress = supportAddresses.get(nextRow);
            supportAddresses.set(nextRow, address);
            supportAddresses.set(selectedRow, nextAddress);
            table.getSelectionModel().addSelectionInterval(nextRow, nextRow);
        }
    }//GEN-LAST:event_downButtonActionPerformed

    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
        supportAddresses = RemoteSupportFrame.getDefaultList();
        tableModel.fireTableDataChanged();
    }//GEN-LAST:event_defaultButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        table.getSelectionModel().addListSelectionListener(this);
    }//GEN-LAST:event_formWindowOpened

    private class SupportAddressesTableModel extends AbstractTableModel {

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public int getRowCount() {
            return getSupportAddresses().size();
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return BUNDLE.getString("Description");
                case 1:
                    return BUNDLE.getString("Address");
                case 2:
                    return BUNDLE.getString("Encryption");
                default:
                    LOGGER.log(Level.WARNING,
                            "unsupported column: {0}", column);
            }
            return null;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return (columnIndex == 2) ? Boolean.class : String.class;
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return true;
        }

        @Override
        public Object getValueAt(int row, int column) {
            SupportAddress supportAddress = getSupportAddresses().get(row);
            switch (column) {
                case 0:
                    return supportAddress.getDescription();
                case 1:
                    return supportAddress.getAddress();
                case 2:
                    return supportAddress.isEncrypted();
                default:
                    LOGGER.log(Level.WARNING,
                            "unsupported column: {0}", column);
            }
            return null;
        }

        @Override
        public void setValueAt(Object value, int row, int column) {
            SupportAddress supportAddress = getSupportAddresses().get(row);
            switch (column) {
                case 0:
                    supportAddress.setDescription((String) value);
                    break;
                case 1:
                    supportAddress.setAddress((String) value);
                    break;
                case 2:
                    supportAddress.setEncrypted((Boolean) value);
                    break;
                default:
                    LOGGER.log(Level.WARNING,
                            "unsupported column: {0}", column);
            }
        }

        public void addSupportAddress() {
            getSupportAddresses().add(new SupportAddress("", "", false));
            int row = getSupportAddresses().size() - 1;
            fireTableRowsInserted(row, row);
        }

        public void removeSupportAddresses(int[] rows) {
            for (int i = rows.length - 1; i >= 0; i--) {
                int row = rows[i];
                getSupportAddresses().remove(row);
                fireTableRowsDeleted(row, row);
            }
        }
    }

    private void adjustColumnPreferredWidths(JTable table) {
        // strategy - get max width for cells in column and
        // make that the preferred width
        TableColumnModel columnModel = table.getColumnModel();
        for (int col = 0; col < table.getColumnCount(); col++) {
            TableColumn tableColumn = table.getColumnModel().getColumn(col);
            int maxwidth = (int) table.getTableHeader().getDefaultRenderer().
                    getTableCellRendererComponent(table,
                            tableColumn.getIdentifier(), false, false, -1, col).
                    getPreferredSize().getWidth();
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer rend = table.getCellRenderer(row, col);
                Object value = table.getValueAt(row, col);
                Component comp = rend.getTableCellRendererComponent(table,
                        value, false, false, row, col);
                maxwidth = Math.max(comp.getPreferredSize().width, maxwidth);
            }

            TableColumn column = columnModel.getColumn(col);
            column.setPreferredWidth(maxwidth);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton defaultButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton downButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JButton okButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables
}
