package ch.imedias.rscc;

import ch.imedias.rscc.utils.ProcessExecutor;
import ch.imedias.rscc.model.SupportAddress;
import java.awt.CardLayout;
import java.beans.PropertyChangeListener;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.*;

/**
 * the main application frame
 *
 * @author Ronny Standtke <ronny.standtke@fhnw.ch>
 */
public class RemoteSupportFrame
        extends JFrame
        implements PropertyChangeListener {

    public static final Logger LOGGER =
            Logger.getLogger(RemoteSupportFrame.class.getName());
    private static final ResourceBundle BUNDLE = ResourceBundle.getBundle(
            "ch/imedias/rscc/Bundle");
    private final static ProcessExecutor SEEK_PROCESS_EXECUTOR =
            new ProcessExecutor();
    private final static ProcessExecutor OFFER_PROCESS_EXECUTOR =
            new ProcessExecutor();
    private final static List<ProcessExecutor> TUNNEL_EXECUTORS =
            new ArrayList<ProcessExecutor>();
    
    public final static String SUPPORT_ADDRESSES = "supportAddresses";
    private final static String SECURE_PORTS = "securePorts";
    private final static String COMPRESSION_LEVEL = "compressionLevel";
    private final static String QUALITY = "quality";
    private final static String BGR233 = "bgr233";
  //  private final Preferences preferences;
    private final SpinnerNumberModel compressionSpinnerModel;
    private final SpinnerNumberModel qualitySpinnerModel;
    private final SpinnerNumberModel scaleSpinnerModel;
    private SupportAddress supportAddress;
    private Pattern okPlainPattern;
    private Pattern okSSLPattern;
    private Pattern failedPattern;
    private List<SupportAddress> supportAddresses;
    private MyComboboxModel comboboxModel;

    /**
     * Creates new form RemoteSupportFrame
     */
    public RemoteSupportFrame() {
        //preferences = Preferences.userNodeForPackage(RemoteSupportFrame.class);
        compressionSpinnerModel = new SpinnerNumberModel(6, 0, 9, 1);
        qualitySpinnerModel = new SpinnerNumberModel(6, 0, 9, 1);
        scaleSpinnerModel = new SpinnerNumberModel(1.0, 0.1, null, 0.1);

        initComponents();
        setIconImage(new ImageIcon(getClass().getResource(
                "/ch/imedias/rscc/krdc.png")).getImage());

        pack(); 
        setLocationRelativeTo(null);
    }
    
    public JComboBox getComboBox(){
        return this.comboBox;
    }
    
    public MyComboboxModel getComboBoxModel(){
        return this.comboboxModel;
    }
    
    public SpinnerNumberModel getScaleSpinnerModel(){
        return this.scaleSpinnerModel;
    }
    
    public EditDialog createAndGetEditDialog(){
        EditDialog editDialog = new EditDialog(RemoteSupportFrame.this, supportAddresses);
        return editDialog;
    }
    
    public void setDefaultAddresses(List<SupportAddress> defaultAddresses){
        
        System.out.println("helloooo");
        
        supportAddresses = defaultAddresses;
    }
    
    public SpinnerNumberModel getCompressionSpinnerModel(){
        return this.compressionSpinnerModel;
    }
    
    public SpinnerNumberModel getQualitySpinnerModel(){
        return this.qualitySpinnerModel;
    }
    
    public void initComboboxModel(){
        comboboxModel = new MyComboboxModel();
        comboBox.setModel(comboboxModel);
        if (comboboxModel.getSize() > 0) {
            comboBox.setSelectedIndex(0);
        } else {
            comboBox.setSelectedIndex(-1);
        }
    }

    public JPanel getSeekSuportPanel(){
      return this.seekSupportPanel;
    }
    
    public void setConnectedLabelText(String text){
        connectedLabel.setText(text);
    }
    
    public JButton getOfferSupportButton(){
        return this.offerSupportButton;
    }
    public JButton getDisconnectButton(){
        return this.disconnectButton;
    }
    public JButton getQuitButton(){
        return this.quitButton;
    }
    public JButton getConnectButton(){
        return this.connectButton;
    }
    
    public JLabel getConnectingLabel(){
        return connectingLabel;
    }
    
    public String getOfferSupportButtonActionCommand(){
        return this.offerSupportButton.getActionCommand();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tabbedPane = new javax.swing.JTabbedPane();
        seekSupportPanel = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        supportAddressLabel = new javax.swing.JLabel();
        comboBox = new javax.swing.JComboBox();
        editButton = new javax.swing.JButton();
        scaleLabel = new javax.swing.JLabel();
        scaleSpinner = new javax.swing.JSpinner();
        buttonPanel = new javax.swing.JPanel();
        connectButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        connectingPanel = new javax.swing.JPanel();
        connectingLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        connectedPanel = new javax.swing.JPanel();
        connectedLabel = new javax.swing.JLabel();
        disconnectButton = new javax.swing.JButton();
        offerSupportPanel = new javax.swing.JPanel();
        picturePropertiesPanel = new javax.swing.JPanel();
        compressionLabel = new javax.swing.JLabel();
        compressionSpinner = new javax.swing.JSpinner();
        bgr233CheckBox = new javax.swing.JCheckBox();
        qualityLabel = new javax.swing.JLabel();
        qualitySpinner = new javax.swing.JSpinner();
        securePortsLabel = new javax.swing.JLabel();
        securePortsTextField = new javax.swing.JTextField();
        offerSupportButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ch/imedias/rscc/Bundle"); // NOI18N
        setTitle(bundle.getString("RemoteSupportFrame.title")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        seekSupportPanel.setLayout(new java.awt.CardLayout());

        mainPanel.setLayout(new java.awt.GridBagLayout());

        supportAddressLabel.setText(bundle.getString("RemoteSupportDialog.supportAddressLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        mainPanel.add(supportAddressLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        mainPanel.add(comboBox, gridBagConstraints);

        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/imedias/rscc/icons/16x16/document-edit.png"))); // NOI18N
        editButton.setToolTipText(bundle.getString("RemoteSupportFrame.editButton.toolTipText")); // NOI18N
        editButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        mainPanel.add(editButton, gridBagConstraints);

        scaleLabel.setText(bundle.getString("RemoteSupportFrame.scaleLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        mainPanel.add(scaleLabel, gridBagConstraints);

        scaleSpinner.setModel(scaleSpinnerModel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        mainPanel.add(scaleSpinner, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        connectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/imedias/rscc/icons/16x16/network-connect.png"))); // NOI18N
        connectButton.setText(bundle.getString("RemoteSupportDialog.connectButton.text")); // NOI18N
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        buttonPanel.add(connectButton, gridBagConstraints);

        quitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/imedias/rscc/icons/16x16/application-exit.png"))); // NOI18N
        quitButton.setText(bundle.getString("RemoteSupportDialog.cancelButton.text")); // NOI18N
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        buttonPanel.add(quitButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 10, 10);
        mainPanel.add(buttonPanel, gridBagConstraints);

        seekSupportPanel.add(mainPanel, "mainPanel");

        connectingPanel.setLayout(new java.awt.GridBagLayout());

        connectingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        connectingLabel.setText(bundle.getString("Connecting_To")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        connectingPanel.add(connectingLabel, gridBagConstraints);

        progressBar.setIndeterminate(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectingPanel.add(progressBar, gridBagConstraints);

        seekSupportPanel.add(connectingPanel, "connectingPanel");

        connectedPanel.setLayout(new java.awt.GridBagLayout());

        connectedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        connectedLabel.setText(bundle.getString("Connected_To")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        connectedPanel.add(connectedLabel, gridBagConstraints);

        disconnectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/imedias/rscc/icons/16x16/network-disconnect.png"))); // NOI18N
        disconnectButton.setText(bundle.getString("RemoteSupportFrame.disconnectButton.text")); // NOI18N
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        connectedPanel.add(disconnectButton, gridBagConstraints);

        seekSupportPanel.add(connectedPanel, "connectedPanel");

        tabbedPane.addTab(bundle.getString("RemoteSupportFrame.seekSupportPanel.TabConstraints.tabTitle"), seekSupportPanel); // NOI18N

        offerSupportPanel.setLayout(new java.awt.GridBagLayout());

        picturePropertiesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("RemoteSupportFrame.picturePropertiesPanel.border.title"))); // NOI18N
        picturePropertiesPanel.setLayout(new java.awt.GridBagLayout());

        compressionLabel.setText(bundle.getString("RemoteSupportFrame.compressionLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        picturePropertiesPanel.add(compressionLabel, gridBagConstraints);

        compressionSpinner.setModel(compressionSpinnerModel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        picturePropertiesPanel.add(compressionSpinner, gridBagConstraints);

        bgr233CheckBox.setText(bundle.getString("RemoteSupportFrame.bgr233CheckBox.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        picturePropertiesPanel.add(bgr233CheckBox, gridBagConstraints);

        qualityLabel.setText(bundle.getString("RemoteSupportFrame.qualityLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        picturePropertiesPanel.add(qualityLabel, gridBagConstraints);

        qualitySpinner.setModel(qualitySpinnerModel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        picturePropertiesPanel.add(qualitySpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        offerSupportPanel.add(picturePropertiesPanel, gridBagConstraints);

        securePortsLabel.setText(bundle.getString("RemoteSupportFrame.securePortsLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        offerSupportPanel.add(securePortsLabel, gridBagConstraints);

        securePortsTextField.setToolTipText(bundle.getString("RemoteSupportFrame.securePortsTextField.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        offerSupportPanel.add(securePortsTextField, gridBagConstraints);

        offerSupportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/imedias/rscc/icons/16x16/fork.png"))); // NOI18N
        offerSupportButton.setText(bundle.getString("Start_Service")); // NOI18N
        offerSupportButton.setActionCommand("start");
        offerSupportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offerSupportButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        offerSupportPanel.add(offerSupportButton, gridBagConstraints);

        tabbedPane.addTab(bundle.getString("RemoteSupportFrame.offerSupportPanel.TabConstraints.tabTitle"), offerSupportPanel); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(tabbedPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        
    }//GEN-LAST:event_editButtonActionPerformed

    /*
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
      
    }//GEN-LAST:event_connectButtonActionPerformed
*//*
    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed

    }//GEN-LAST:event_quitButtonActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed

    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      
    }//GEN-LAST:event_formWindowClosing
*/
    /*
    private void offerSupportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offerSupportButtonActionPerformed
     
    }//GEN-LAST:event_offerSupportButtonActionPerformed
*/
  
    
    public JSpinner getCompressionSpinner(){
        return this.compressionSpinner;
    }
    
    public JSpinner getQualitySpinner(){
        return this.qualitySpinner;
    }
    
    public JCheckBox getBGR233CheckBox(){
        return this.bgr233CheckBox;
    }
    
    public JTextField getSecurePortsTextField(){
        return this.securePortsTextField;
    }

   /* public class MyComboboxModel extends DefaultComboBoxModel {

        @Override
        public int getSize() {
            return supportAddresses.size();
        }

        @Override
        public Object getElementAt(int index) {
            SupportAddress supportAddress = supportAddresses.get(index);
            if (supportAddress == null) {
                return null;
            } else {
                return supportAddress.getDescription();
            }
        }

        public void fireContentsChanged() {
            fireContentsChanged(this, 0, getSize() - 1);
        }
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bgr233CheckBox;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JComboBox comboBox;
    private javax.swing.JLabel compressionLabel;
    private javax.swing.JSpinner compressionSpinner;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel connectedLabel;
    private javax.swing.JPanel connectedPanel;
    private javax.swing.JLabel connectingLabel;
    private javax.swing.JPanel connectingPanel;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JButton editButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton offerSupportButton;
    private javax.swing.JPanel offerSupportPanel;
    private javax.swing.JPanel picturePropertiesPanel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel qualityLabel;
    private javax.swing.JSpinner qualitySpinner;
    private javax.swing.JButton quitButton;
    private javax.swing.JLabel scaleLabel;
    private javax.swing.JSpinner scaleSpinner;
    private javax.swing.JLabel securePortsLabel;
    private javax.swing.JTextField securePortsTextField;
    private javax.swing.JPanel seekSupportPanel;
    private javax.swing.JLabel supportAddressLabel;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
